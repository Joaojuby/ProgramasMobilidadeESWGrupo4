// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ProgramasMobilidadeESW2017.Data;
using System;

namespace ProgramasMobilidadeESW2017.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180121212649_ProgramasMobilidade10")]
    partial class ProgramasMobilidade10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Genero");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nacionalidade");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PrimeiroNome");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UltimoNome");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.Candidatura", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EstadoCandidaturaID");

                    b.Property<string>("NomePessoaContacto")
                        .IsRequired();

                    b.Property<int>("ProgramaMobilidadeID");

                    b.Property<string>("RelacaoComCandidato")
                        .IsRequired();

                    b.Property<long>("TelefonePessoaContacto");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("EstadoCandidaturaID");

                    b.HasIndex("ProgramaMobilidadeID");

                    b.HasIndex("UserId");

                    b.ToTable("Candidaturas");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.Entrevista", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CandidaturaID");

                    b.Property<DateTime>("DataEntrevista");

                    b.HasKey("ID");

                    b.HasIndex("CandidaturaID");

                    b.ToTable("Entrevistas");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.EstadoCandidatura", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Designacao");

                    b.HasKey("ID");

                    b.ToTable("EstadosCandidaturas");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.Instituicao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Morada");

                    b.Property<string>("Nome");

                    b.Property<int>("PaisID");

                    b.Property<long>("PhoneNumber");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.HasIndex("PaisID");

                    b.ToTable("Instituicoes");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.ObservacaoCandidatura", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CandidaturaID");

                    b.Property<string>("Nota");

                    b.HasKey("ID");

                    b.HasIndex("CandidaturaID");

                    b.ToTable("ObservacoesCandidaturas");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.Pais", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoISO");

                    b.Property<int>("CodigoPais");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.ProgramaMobilidade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataInicioInscricao");

                    b.Property<DateTime>("DataLimiteInscricao");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("Duracao");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("TipoProgramaMobilidadeID");

                    b.HasKey("ID");

                    b.HasIndex("TipoProgramaMobilidadeID");

                    b.ToTable("ProgramasMobilidade");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.ProgramaMobilidadePais", b =>
                {
                    b.Property<int>("PaisID");

                    b.Property<int>("ProgramaMobilidadeID");

                    b.HasKey("PaisID", "ProgramaMobilidadeID");

                    b.HasIndex("ProgramaMobilidadeID");

                    b.ToTable("ProgramasMobilidadePais");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.TipoProgramaMobilidade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Designacao");

                    b.HasKey("ID");

                    b.ToTable("TiposProgramaMobilidade");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProgramasMobilidadeESW2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.Candidatura", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.EstadoCandidatura", "EstadoCandidatura")
                        .WithMany()
                        .HasForeignKey("EstadoCandidaturaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProgramasMobilidadeESW2017.Models.ProgramaMobilidade", "ProgramaMobilidade")
                        .WithMany()
                        .HasForeignKey("ProgramaMobilidadeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProgramasMobilidadeESW2017.Models.ApplicationUser", "User")
                        .WithMany("Candidaturas")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.Entrevista", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.Candidatura", "Candidatura")
                        .WithMany("Entrevistas")
                        .HasForeignKey("CandidaturaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.Instituicao", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.Pais", "Pais")
                        .WithMany("Instituicoes")
                        .HasForeignKey("PaisID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.ObservacaoCandidatura", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.Candidatura", "Candidatura")
                        .WithMany("Observacoes")
                        .HasForeignKey("CandidaturaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.ProgramaMobilidade", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.TipoProgramaMobilidade", "TipoProgramaMobilidade")
                        .WithMany()
                        .HasForeignKey("TipoProgramaMobilidadeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProgramasMobilidadeESW2017.Models.ProgramaMobilidadePais", b =>
                {
                    b.HasOne("ProgramasMobilidadeESW2017.Models.Pais", "Pais")
                        .WithMany("ListaProgramas")
                        .HasForeignKey("PaisID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProgramasMobilidadeESW2017.Models.ProgramaMobilidade", "ProgramaMobilidade")
                        .WithMany("ListaPaises")
                        .HasForeignKey("ProgramaMobilidadeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
